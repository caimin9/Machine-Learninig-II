#######################################################
######## Correlation Filter
#######################################################








#######################################################
######## Fitting RF, GBM, Tree, Pruned Tree
#######################################################
######### TREE #########
my_tree = tree(High~.,data = CS, subset = index) 
######### BAGGED TREE #########
bag.tree = randomForest(High~.,data = CS,subset = index, mtry = P) #BAGGED TREE (SINCE MTRY = #OF PREDICTORS)
######### PRUNED TREE #########
prune_tree = cv.tree(my_tree, FUN = prune.misclass) 
opt_pt = prune.misclass(my_tree, best = opt_size)
######### RF #########
rf.out = randomForest(High~., CS, ntree=5000) #A random forest fitted usng 5000 trees
######### GBM #########
gb.out = gbm(High~., data=CS, 
             distribution="bernoulli", # use "gaussian" instead for regression
             n.trees=5000, # size of the ensemble
             interaction.depth=1) # depth of the trees, 1 = stumps
### USing caret
my_gbm = train(High~., data = dat.train, method = 'gbm')
gbm_fitted = predict(my_gbm) #To get fitted values
#######################################################
######## Neural Network Scaling
#######################################################







#######################################################
######## Recode Levels
#######################################################
# Makes it binary (1,0) --> Regression Problems & GBM with Bernoulli distribution
CS$High = as.numeric(CS$High == 'Yes')

#Makes it into factors (Yes, No) --> Classification Problems
CS$High = as.factor(CS$High)

#######################################################
######## KNN ROC ANALYSIS ALTERATION
#######################################################
